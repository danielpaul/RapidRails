#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

# user setup variables
$new_project = nil
$final_checklist = []

def color_text(color, text)
  color = case color
          when :red
            91
          when :green
            92
          when :yellow
            93
          when :blue
            94
          else
            0
          end

  "\e[#{color};1m#{text}\e[0m"
end

def display_message(type, text)
  icon, color = case type
                when :success
                  ["✔", :green]
                when :warning
                  ["⚠", :yellow]
                when :error
                  ["✖", :red]
                else
                  ["ℹ", :blue]
                end

  render_text = color_text(color, icon) + " #{text}"

  $final_checklist << render_text if %i[success warning error].include?(type)

  puts "\n"
  puts render_text
end

def system!(*args)
  system(*args) || abort("\n" + display_message(:error, "Command #{args} failed"))
end

def ask(question)
  puts "\n"
  puts color_text(:blue, question)
  STDIN.gets.chomp
end

def ask_if_new_project
  $new_project = (ask("Is this a new project? (y/N)").downcase == "y")
end

def is_new_project?
  ask_if_new_project if $new_project.nil?

  $new_project == true
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts color_text(:blue, "\n===== Rapid engines are warming up... strap in! =====")
  puts

  # ======================== Install system dependencies ======================== #
  display_message(:info, "Installing system dependencies...")

  # Install system dependencies if Homebrew is installed
  if system('[[ (-x "$(command -v brew)") ]]')
    system("brew bundle check --no-upgrade") || system!("brew bundle --no-upgrade")
    display_message(:success, "System dependencies.")
  else
    display_message(:warning, "Homebrew not installed. Skipped system dependencies installation.")
  end

  # ======================== Install Ruby dependencies ======================== #
  display_message(:info, "Installing Ruby dependencies...")
  system!("gem install bundler --conservative")
  system("bundle check") || system!("bundle install")
  display_message(:success, "Ruby dependencies.")

  # ======================== Setup Rails Credentials & ENV variables ======================== #
  display_message :info, "Preparing .env file..."

  if File.exist?(".env")
    display_message :warning, ".env file exists. Skipped .env file creation."
  else
    FileUtils.cp ".env.template", ".env"
    display_message :success, ".env file created."
  end

  display_message :info, "Preparing Rails credentials file..."

  # credentails exist, master key exists -> skip
  # credentials exist, master key does not exist -> new project? -> create or skip based on answer
  # credentials do not exist, master key exists -> create
  # credentials do not exist, master key does not exist -> create

  create_new_credentials_file = false

  if File.exist?("config/credentials.yml.enc") && File.exist?("config/master.key")
    display_message :warning, "Encrypted credentials file and master.key exists."
  elsif File.exist?("config/credentials.yml.enc") && !File.exist?("config/master.key")

    if is_new_project?
      create_new_credentials_file = true
    else

      # ask for the existing master key & create master.key file with the value
      puts "Enter the existing master key:"
      master_key = STDIN.gets.chomp
      File.write("config/master.key", master_key)

      display_message :success, "master.key file created."

    end
  else
    create_new_credentials_file = true
  end

  if create_new_credentials_file
    if File.exist?("config/master.key")
      FileUtils.rm "config/master.key"
      puts "Removed existing master.key file."
    end

    if File.exist?("config/credentials.yml.enc")
      FileUtils.rm "config/credentials.yml.enc"
      puts "Removed existing encrypted credentials file."
    end

    system! "EDITOR='echo' bin/rails credentials:edit"
    display_message :success, "Created new encrypted credentials & master.key file."
  end

  # ======================== Setup Database ======================== #
  # Update Database name in config/database.yml
  display_message :info, "Preparing database.yml file..."

  FileUtils.rm "config/database.yml" if is_new_project? && File.exist?("config/database.yml")

  if File.exist?("config/database.yml")
    display_message :warning, "config/database.yml file exists. Skipped database.yml file setup."
  else
    # ask the user for the database name
    # create config.yml from template and update the database name
    puts "Enter the database name:"
    database_name = STDIN.gets.chomp
    File.write("config/database.yml", File.read("config/database.yml.template").gsub("rapid_rails", database_name))

    display_message :success, "config/database.yml file created."
  end

  display_message :info, "Preparing database..."
  system! "bin/rails db:prepare"
  display_message :success, "Database setup."

  # ======================== Other stuff ======================== #
  display_message :info, "Removing old logs and tempfiles..."
  system! "bin/rails log:clear tmp:clear"
  display_message :success, "Old logs and tempfiles removed."

  display_message :info, "Restarting application server..."
  system! "bin/rails restart"
  display_message :success, "Application server restarted."

  puts "\n\n\n"
  art = <<~MULTI_LINE_STRING
    ██████╗░░█████╗░██████╗░██╗██████╗░██████╗░░█████╗░██╗██╗░░░░░░██████╗
    ██╔══██╗██╔══██╗██╔══██╗██║██╔══██╗██╔══██╗██╔══██╗██║██║░░░░░██╔════╝
    ██████╔╝███████║██████╔╝██║██║░░██║██████╔╝███████║██║██║░░░░░╚█████╗░
    ██╔══██╗██╔══██║██╔═══╝░██║██║░░██║██╔══██╗██╔══██║██║██║░░░░░░╚═══██╗
    ██║░░██║██║░░██║██║░░░░░██║██████╔╝██║░░██║██║░░██║██║███████╗██████╔╝
    ╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░░░░╚═╝╚═════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚══════╝╚═════╝░#{'              '}
  MULTI_LINE_STRING

  puts color_text(:blue, art)
  puts "\n"
  puts color_text(:green, "\n=============== You're ready to go! ===============")
  puts
  puts $final_checklist
  puts
end
